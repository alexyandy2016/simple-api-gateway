worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include       mime.types;

    resolver 127.0.0.11; # Docker embedded DNS

    sendfile        on;
    keepalive_timeout  60;

    lua_shared_dict configs 10m;
    init_by_lua_file lua/init.lua;
    log_format request_log escape=json '{"request_id":"$request_id","time_local":"$time_local",'
    '"remote_addr":"$remote_addr","user_agent":"$http_user_agent","method":"$request_method","uri":"$uri","query_string":"$query_string","request_time":"$request_time",'
    '"request_headers":{"Accept":"$http_accept","Cache-Control":"$http_cache_control"},'
    '"request_body":"$log_request_body",'
    '"response_headers":{"Content-Type":"$upstream_http_content_type","Cache-Control":"$upstream_http_cache_control"},'
    '"response_status":$status,'
    '"response_body":"$response_body"}';

    server {

        listen       80;
        server_name  localhost;
        lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
        lua_ssl_verify_depth 5;

        set_by_lua_block $backend {
        local configs = ngx.shared.configs
            return configs:get("BACKEND")
    }

        location / {
            # lua_code_cache off;
            default_type application/json;
            access_by_lua_file lua/req_recorder.lua;

            proxy_pass http://$backend;

            set $log_request_body "";
            set $response_body "";

            body_filter_by_lua_file lua/resp_body_recorder.lua;
            header_filter_by_lua_file lua/resp_header_recorder.lua;

            # content_by_lua_block {
            # local cjson = require "cjson"
            #    local message = {
            # ["message"]="ok",
            # }
            # ngx.say(cjson.encode(message))
            # }
            access_log logs/access.log request_log;
        }


        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
